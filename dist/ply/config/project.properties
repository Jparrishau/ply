# the directory in which source files are stored. used primarily in compilation.
# the default follows the convention of maven
src.dir=src/main/java
# the directory in which resource (non-source files like properties and configuration xml files) are stored.
# the default follows the convention of maven
res.dir=src/main/resources
# the directory into which build artifacts and compiled files are stored.
# the default follows the convention of maven
build.dir=target
# the directory into which resources are copied (primed for filtering/packaging/etc)
res.build.dir=${build.dir}/resources
# the base directory used to match files for filtering (the matched files are determined by the filter-files[.scope].properties)
filter.dir=${res.build.dir}
# the namespace for the project.  analogous to the groupId in maven.  see the init process for how this is defaulted.
#namespace=
# the name of the project.  analogous to the artifactId in maven (maven also has a name tag which
# ply forgoes for simplicity).  see the init process for how this is defaulted.
#name=
# the version of the project.  analogous to the version in maven.  see the init process for how this is defaulted
#version=
# the packaging type of the project.  this is used by the resolved script from the 'package' alias to determine how
# to package the project (i.e., bundle into a zip/jar/war etc).
packaging=jar
# the artifact name of the project.
artifact.name=${name}-${version}.${packaging}
# the non-scoped dependency atom of this project (should not be overridden by scopes as 
# this provides for a reliable way to determine the non-scoped namespace:name:version:artifact.name information).
nonscoped.artifact.name=${namespace}:${name}:${version}:${name}-${version}.${packaging}
# the directory into which project specific scripts are stored. when resolving scripts,
# ply first resolves the script name as an alias from the scripts.properties, then 
# looks for an executable script named as such in this directory.  if it is not found,
# ply then looks in the install directory's scripts directory.  if still not found,
# ply finally invokes the script as an executable resolved via the OS's native PATH.
scripts.dir=scripts
# the directory into which reports (like test coverage reports) will be saved
reports.dir=${build.dir}/reports
# the scope to use to resolve which submodules to use for the project while building.
# normally scope is prepended to the alias/script with a ':' (i.e., 'ply test:install'
# where 'test' is the scope for the alias 'install').  the scope is per alias/script, as
# opposed to per invocation (i.e.; it is not, 'ply --test install') to allow for invocation with
# mixed scope (i.e., 'ply clean install test:install').  instead of making ply also have per
# invocation scope options (i.e., again, 'ply --test install') just to handle this one-off
# use case for submodules this property is used.  typically, this property will just
# be set on invocation (i.e., 'ply test:install -Pproject.submodules.scope=test').
submodules.scope=